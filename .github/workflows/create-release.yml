# Prepares the Release artifacts, creates a new GitHub Release, and publishes the artifacts to the Release
name: Create Release

on:
  workflow_dispatch:
    inputs:
      # todo: get nupkgVersion dynamically
      nupkgVersion:
        description: "nupkgVersion. Example: 0.1.0-alpha.20230510.1"
        required: true
      isPreRelease:
        description: "isPreRelease. Indicator of whether or not this is a prerelease"
        required: true
        type: choice
        options:
          - true
          - false

jobs:
  publish:
    runs-on: windows-latest
    name: Create New Release
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Use Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Emulator UI dependencies
        working-directory: ./AcsEmulator/acs-emulator-ui
        run: npm install

      - name: Build UI Project
        working-directory: ./AcsEmulator/acs-emulator-ui
        run: npm run build

      - name: Create Certificate
        working-directory: ./AcsEmulator/AcsEmulatorAPI
        run: ./createSelfSignedCert.ps1

      - name: Restore Dependencies
        working-directory: ./AcsEmulator
        run: dotnet restore
      
      - name: Build CLI project
        working-directory: ./AcsEmulator
        run: dotnet build AcsEmulatorCLI --configuration Release --property:Version=${{ github.event.inputs.nupkgVersion }}
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: AcsEmulatorCLI ${{ github.event.inputs.nupkgVersion }}
          prerelease: ${{ github.event.inputs.isPreRelease }}
          tag_name: v${{ github.event.inputs.nupkgVersion }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./AcsEmulator/AcsEmulatorCLI/nupkg/AcsEmulatorCLI.${{ github.event.inputs.nupkgVersion }}.nupkg
          body: "
            # Emulator for Azure Communication Services

            Local emulator to run Azure Communication Services client SDKs without having to provision an Azure Communication Services resource.

            ## Download the emulator CLI tool

            ### Install from GitHub

            Make sure you have the .NET Core SDK installed, download the latest [AcsEmulatorCLI Release](https://github.com/DominikMe/acs-emulator/releases) and then run from a terminal:

            ```dotnetcli\ndotnet tool install -g --add-source [downloadFolder] AcsEmulatorCLI --version ${{ github.event.inputs.nupkgVersion }}\n```

            ### Running the tool

            **Usage:**\n

            `acs-emulator [command] [options]`\n

            **Commands:**\n

            | Command            | Description                      |\n
            | ------------------ | -------------------------------- |\n
            |  `--version `        | Show version information\n
            |  `-?, -h, --help`    | Show help and usage information |\n
            |  `run`               | Run the emulator. |\n
            |  `openApi`           | Open the emulator's API in Swagger UI. |\n
            |  `openDB`            | Open the emulator's sqlite database.         |\n
            |  `openUI`            | Open the emulator UI. |\n
            |  `clean`             | Clean all data and reset the emulator state. |\n
            |  `connectionString`  | Get the ACS connection string for the emulator. |\n
            |  `repo`              | Open code repository. |\n
          "